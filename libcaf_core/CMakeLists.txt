# get header files; only needed by CMake generators,
# e.g., for creating proper Xcode projects
file(GLOB_RECURSE LIBCAF_CORE_HDRS "caf/*.hpp")

# list cpp files excluding platform-dependent files
set(LIBCAF_CORE_SRCS
  src/abstract_actor.cpp
  src/abstract_channel.cpp
  src/abstract_composable_behavior.cpp
  src/abstract_coordinator.cpp
  src/abstract_group.cpp
  src/actor.cpp
  src/actor_addr.cpp
  src/actor_clock.cpp
  src/actor_companion.cpp
  src/actor_config.cpp
  src/actor_control_block.cpp
  src/actor_ostream.cpp
  src/actor_pool.cpp
  src/actor_proxy.cpp
  src/actor_registry.cpp
  src/actor_system.cpp
  src/actor_system_config.cpp
  src/append_hex.cpp
  src/atom.cpp
  src/attachable.cpp
  src/behavior.cpp
  src/behavior_impl.cpp
  src/behavior_stack.cpp
  src/binary_deserializer.cpp
  src/binary_serializer.cpp
  src/blocking_actor.cpp
  src/blocking_behavior.cpp
  src/chars.cpp
  src/concatenated_tuple.cpp
  src/config_option.cpp
  src/config_option_adder.cpp
  src/config_option_set.cpp
  src/config_value.cpp
  src/decorated_tuple.cpp
  src/default_attachable.cpp
  src/defaults.cpp
  src/deserializer.cpp
  src/downstream_manager.cpp
  src/downstream_manager_base.cpp
  src/downstream_messages.cpp
  src/duration.cpp
  src/dynamic_message_data.cpp
  src/error.cpp
  src/event_based_actor.cpp
  src/execution_unit.cpp
  src/exit_reason.cpp
  src/forwarding_actor_proxy.cpp
  src/get_mac_addresses.cpp
  src/get_process_id.cpp
  src/get_root_uuid.cpp
  src/group.cpp
  src/group_manager.cpp
  src/group_module.cpp
  src/inbound_path.cpp
  src/ini_consumer.cpp
  src/invoke_result_visitor.cpp
  src/ipv4_address.cpp
  src/ipv4_subnet.cpp
  src/ipv6_address.cpp
  src/ipv6_subnet.cpp
  src/local_actor.cpp
  src/logger.cpp
  src/mailbox_element.cpp
  src/make_config_option.cpp
  src/match_case.cpp
  src/memory_managed.cpp
  src/merged_tuple.cpp
  src/message.cpp
  src/message_builder.cpp
  src/message_data.cpp
  src/message_handler.cpp
  src/message_view.cpp
  src/monitorable_actor.cpp
  src/node_id.cpp
  src/outbound_path.cpp
  src/pec.cpp
  src/pretty_type_name.cpp
  src/private_thread.cpp
  src/proxy_registry.cpp
  src/raise_error.cpp
  src/raw_event_based_actor.cpp
  src/ref_counted.cpp
  src/replies_to.cpp
  src/response_promise.cpp
  src/resumable.cpp
  src/ripemd_160.cpp
  src/rtti_pair.cpp
  src/runtime_settings_map.cpp
  src/scheduled_actor.cpp
  src/scoped_actor.cpp
  src/scoped_execution_unit.cpp
  src/sec.cpp
  src/sequencer.cpp
  src/serializer.cpp
  src/set_thread_name.cpp
  src/settings.cpp
  src/shared_spinlock.cpp
  src/simple_actor_clock.cpp
  src/skip.cpp
  src/splitter.cpp
  src/stream_aborter.cpp
  src/stream_manager.cpp
  src/stream_priority.cpp
  src/string_algorithms.cpp
  src/string_view.cpp
  src/stringification_inspector.cpp
  src/sync_request_bouncer.cpp
  src/term.cpp
  src/test_actor_clock.cpp
  src/test_coordinator.cpp
  src/thread_hook.cpp
  src/thread_safe_actor_clock.cpp
  src/tick_emitter.cpp
  src/timestamp.cpp
  src/try_match.cpp
  src/type_erased_tuple.cpp
  src/type_erased_value.cpp
  src/uniform_type_info_map.cpp
  src/unprofiled.cpp
  src/uri.cpp
  src/uri_builder.cpp
  src/uri_impl.cpp
  src/work_sharing.cpp
  src/work_stealing.cpp
)

# configure build_config.hpp header
configure_file("${CMAKE_CURRENT_SOURCE_DIR}/../cmake/build_config.hpp.in"
               "${CMAKE_CURRENT_BINARY_DIR}/caf/detail/build_config.hpp"
               @ONLY)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/caf/detail/build_config.hpp"
        DESTINATION include/caf/detail
        COMPONENT core
)
list(APPEND LIBCAF_CORE_HDRS
  "${CMAKE_CURRENT_BINARY_DIR}/caf/detail/build_config.hpp"
)

# create core target
add_library(libcaf_core ${LIBCAF_CORE_SRCS} ${LIBCAF_CORE_HDRS})
target_include_directories(libcaf_core PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)
if (TARGET Threads::Threads)
  target_link_libraries(libcaf_core PUBLIC Threads::Threads)
else ()
  if(NOT APPLE AND NOT WIN32)
    target_link_libraries(libcaf_core PUBLIC -pthread)
    target_compile_options(libcaf_core PUBLIC -pthread)
  endif ()
endif ()
set_target_properties(libcaf_core
  PROPERTIES
  EXPORT_NAME core
  SOVERSION ${CAF_VERSION_COMPAT}
  VERSION ${CAF_VERSION}
  OUTPUT_NAME caf_core
)

install(TARGETS libcaf_core
  EXPORT CAFCoreTargets
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT core
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT core
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT core
)
install(EXPORT CAFCoreTargets
  DESTINATION ${INSTALL_CAF_CMAKEDIR}
  NAMESPACE caf::
  EXPORT_LINK_INTERFACE_LIBRARIES
  COMPONENT core
)
install(
  DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/caf"
  DESTINATION include
  COMPONENT core
  FILES_MATCHING PATTERN "*.hpp"
)

# create alias so find_package(CAF) and add_subdirectory(caf) can be
# interchanged without the need of additional modifications to the
# consuming cmake scripts
add_library(caf::core ALIAS libcaf_core)

if (${BUILD_TESTING})
  add_subdirectory(test)
endif ()
